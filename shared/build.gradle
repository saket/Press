apply plugin: "com.android.library"
apply plugin: "kotlin-multiplatform"
apply plugin: "kotlin-android-extensions"
apply plugin: "com.squareup.sqldelight"
apply plugin: "org.jetbrains.kotlin.native.cocoapods"
apply plugin: "com.codingfeline.buildkonfig"
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jlleitschuh.gradle.ktlint'

android {
  compileSdkVersion versions.compileSdk
  defaultConfig {
    minSdkVersion versions.minSdk
  }
  testOptions.unitTests.includeAndroidResources = true
}

sqldelight {
  PressDatabase {
    packageName = "me.saket.press"
    schemaOutputDirectory = file("src/commonMain/db/databases")
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

kotlin {
  targets {
    fromPreset(presets.android, "android")
    fromPreset(presets.macosX64, "macos") {
      compilations.main.kotlinOptions.freeCompilerArgs += "-Xobjc-generics"
      binaries {
        framework("shared") {
          isStatic = false
          linkerOpts.add("-lsqlite3")
        }
      }
    }
  }

  sourceSets {
    commonMain {
      dependencies {
        implementation project(':wysiwyg')
        implementation project(':kgit')
        implementation deps.reaktive.core.common
        implementation deps.reaktive.interop.coroutines
        implementation deps.koin.core.common
        implementation deps.multiplatformUuid
        implementation deps.klock.common
        implementation deps.sqlDelight.runtime.common
        implementation deps.stately.common
        implementation deps.stately.concurrency
        implementation deps.stately.isolate
        implementation deps.stately.isoCollections
        implementation deps.multiplatformSettings.core
        implementation deps.ktor.client.core
        implementation deps.ktor.logger
        implementation deps.ktor.kotlinxSerialization
        implementation deps.kotlinx.serialization
        implementation (deps.kotlinx.coroutines) { force = true }
        implementation deps.pwBinomFiles.common
      }
    }
    commonTest {
      dependencies {
        implementation kotlin('test-common')
        implementation kotlin('test-annotations-common')
        implementation deps.reaktive.testing.common
        implementation deps.reaktive.testing.utils
        implementation deps.multiplatformSettings.testing
        implementation deps.assertK.common
        implementation deps.assertK.opentest4j // https://youtrack.jetbrains.com/issue/IDEA-214533
      }
    }
    androidMain {
      dependencies {
        implementation deps.androidx.appCompat
        implementation deps.androidx.preferences
        implementation deps.timber
        implementation deps.rx2.core
        implementation deps.reaktive.interop.rxJava2
        implementation deps.sqlDelight.driver.android
        implementation deps.ktor.client.okHttp
        implementation deps.pwBinomFiles.jvm
      }
    }
    androidTest {
      dependencies {
        implementation kotlin('test')
        implementation kotlin('test-junit')
        implementation deps.androidx.test.jUnit
        implementation deps.sqlDelight.driver.jvm
      }
    }
    nativeMain {
      dependencies {
        implementation deps.sqlDelight.driver.native
        implementation deps.ktor.client.cio
        implementation (deps.kotlinx.coroutines) { force = true }
      }
    }
    nativeTest {
      dependencies {
        implementation (deps.kotlinx.coroutines) { force = true }
      }
    }
    macosMain {
      dependsOn(nativeMain)
      dependencies {
        implementation deps.pwBinomFiles.macOS
      }
    }
    macosTest {
      dependsOn(nativeTest)
    }
    all {
      languageSettings {
        enableLanguageFeature('InlineClasses')
        useExperimentalAnnotation('kotlin.Experimental')
      }
    }
  }
}

kotlin.cocoapods {
  summary = "A cross-platform markdown editor"
  homepage = "https://github.com/saket/press"
}
version = 1.0 // also used by cocoapods plugin.

dependencies {}

buildkonfig {
  Properties secrets = new Properties()
  def secretsFile = new File('shared/secrets.properties')
  if (secretsFile.exists()) {
    secrets.load(new FileInputStream(secretsFile))
  }

  packageName = "me.saket.press.shared"
  defaultConfigs {
    buildConfigField "String", "GITHUB_CLIENT_ID", secrets["github_client_id"] ?: "nicolas_cage"
    buildConfigField "String", "GITHUB_CLIENT_SECRET", secrets["github_client_secret"] ?: "nicolas_cage"
    buildConfigField "String", "GIT_TEST_REPO_SSH_URL", secrets["git_test_repo_ssh_url"] ?: ""
    buildConfigField "String", "GIT_TEST_REPO_BRANCH", secrets["git_test_repo_branch"] ?: ""
    buildConfigField "String", "GIT_TEST_SSH_PRIV_KEY", secrets["git_test_ssh_private_key"] ?: ""
    buildConfigField "String", "GIT_TEST_PERSONAL_KEY", secrets["git_test_personal_key"] ?: ""
  }
}
