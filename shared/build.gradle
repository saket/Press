apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-android-extensions'
apply plugin: "com.squareup.sqldelight"

android {
  compileSdkVersion projectVersions.compileSdk
  defaultConfig {
    minSdkVersion projectVersions.minSdk
  }
}

sqldelight {
  PressDatabase {
    packageName = "me.saket.press"
    schemaOutputDirectory = file("src/commonMain/db/databases")
  }
}

// Not sure, but probably used by CocoaPods.
version = 0.1

kotlin {
  targets {
    fromPreset(presets.android, 'android')
    fromPreset(presets.macosX64, 'macos')

    def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
    def iosTarget = (buildForDevice) ? presets.iosArm64 : presets.iosX64

    fromPreset(iosTarget, "ios") {
      binaries {
        framework {
          // Disable bitcode embedding for the simulator build.
          if (!buildForDevice) {
            embedBitcode("disable")
          }
        }
      }
    }
  }

  sourceSets {
    commonMain {
      dependencies {
        implementation project(':wysiwyg')
        implementation deps.reaktive.core.common
        implementation deps.koin.core.common
        implementation deps.multiplatformUuid
        implementation deps.klock.common
        implementation deps.sqlDelight.runtime.common
        implementation deps.stately
        implementation deps.statelyConcurrency
        implementation deps.multiplatformSettings.core
      }
    }
    commonTest {
      dependencies {
        implementation kotlin('test-common')
        implementation kotlin('test-annotations-common')
        implementation deps.reaktive.testing.common
        implementation deps.reaktive.testing.utils
        implementation deps.multiplatformSettings.testing
        implementation deps.assertK.common
        implementation deps.assertK.opentest4j  // https://youtrack.jetbrains.com/issue/IDEA-214533
        implementation deps.statelyCollections
      }
    }
    androidMain {
      dependencies {
        implementation kotlin('stdlib')
        implementation deps.androidx.appCompat
        implementation deps.androidx.preferences
        implementation deps.timber
        implementation deps.rx2.core
        implementation deps.reaktive.interop.android
        implementation deps.sqlDelight.driver.android
      }
    }
    androidTest {
      dependencies {
        implementation kotlin('test')
        implementation kotlin('test-junit')
        implementation deps.androidx.test.jUnit
        implementation deps.robolectric
      }
    }
    macosMain {
      dependencies {
        implementation deps.sqlDelight.driver.native
      }
    }
    macosTest {}
    iosMain {
      dependencies {
        implementation deps.sqlDelight.driver.native
      }
    }
    iosTest {}

    all {
      languageSettings {
        enableLanguageFeature('InlineClasses')
        useExperimentalAnnotation('kotlin.Experimental')
      }
    }
  }
}

dependencies {}

task copyFramework {
  def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
  dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

  doLast {
    def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
    def targetDir = getProperty("configuration.build.dir")
    copy {
      from srcFile.parent
      into targetDir
      include 'shared.framework/**'
      include 'shared.framework.dSYM'
    }
  }
}

task checkiOS {
  def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
  dependsOn 'linkDebugTestIos'
  group = JavaBasePlugin.VERIFICATION_GROUP
  description = "Runs tests for target 'ios' on an iOS simulator"

  doLast {
    def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
    exec {
      commandLine 'xcrun', 'simctl', 'spawn',  '--standalone', device, binary.absolutePath
    }
  }
}
tasks.check.dependsOn checkiOS
